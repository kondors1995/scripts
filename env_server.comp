#!/usr/bin/env bash
#
# Copyright (C) 2017-2018 Albert I (krasCGQ)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Import common bash completion
source ${HOME}/misc/scripts/env_common.comp;

# Set up aliases
alias caddy="caddy -quic -quiet &";
alias http-server="http-server -a 0.0.0.0 -p 9001 >> /dev/null &";
alias ss-server="ss-server -c $HOME/misc/shadowsocks.json --plugin obfs-server --plugin-opts "\"obfs=http"\" 2> /dev/null &";

# Export Go source codes path
export GOPATH=${HOME}/go;

# Export local binary paths
export PATH="${HOME}/.local/bin:${HOME}/KudProject/tc/out/aarch64-linux-android/bin:${GOPATH}/src/github.com/mholt/caddy/caddy:${PATH}";

# Use Central Indonesia Time
export TZ="Asia/Makassar";

# crosstool-ng
source ${HOME}/src/ct-ng/ct-ng.comp;

# transfer.sh
source ${HOME}/misc/transfer.sh;

# Run (including restarting every 5 minutes) TeleSeed bot
function teleseed () {
    # TeleSeed bot source path
    SRC="${HOME}/KudFiles/TeleSeed";

    # Refuse to run if the defined path doesn't exist
    [[ ! -d ${SRC} ]] && echo "${BLD}teleseed:${RST} Make sure your defined path exists and run the command again." && return 1;

    # TeleSeed no yokosou!
    echo "${BLD}teleseed:${RST} Starting bot...";

    # The actual commands
    while sleep 1; do
        CUR=`pwd`;
        PID=`pidof -s telegram-cli`;
        cd ${SRC};
        [[ ! -z ${PID} ]] && kill -9 ${PID} && echo "${BLD}teleseed:${RST} Restarting bot after 5 minutes uptime...";
        ./launch.sh >> /dev/null 2>&1;
        cd ${CUR};
        sleep 299;
    done;
}

# Sign ROM zips before release
function rom_sign () {
    # Special treatment for AICP 12.1 ROM sign
    if [[ ! -z $(pwd | grep aicp-n) ]]; then
        execdir="$HOME/KudProject/los-n";
        extraargs="-e AICP-memo.apk=";
        ln -sf {../../lineage-os/,}vendor/cm;
        aicp="1";
    else
        execdir=".";
    fi;

    # Refuse to run outside ROM source directory or not having one created target files package
    if [[ ! -d ${execdir}/build/tools ]] || [[ $(ls ${execdir}/out/dist | grep target_files | wc -l) -ne 1 ]]; then
        echo "${BLD}rom_sign:${RST} There's nothing to do." && return 1;
    fi;

    # Sign target files package
    ${execdir}/build/tools/releasetools/sign_target_files_apks \
        ${extraargs} \
        -o -d ~/.android-certs \
        out/dist/*-target_files-*.zip \
        signed-target_files.zip \
        || return 1;

    # Convert signed target files package to signed OTA package
    ${execdir}/build/tools/releasetools/ota_from_target_files \
        --block --backup=true \
        -k ~/.android-certs/releasekey \
        signed-target_files.zip \
        signed-ota_update.zip \
        || return 1;

    # Cleanup
    [[ ${aicp} -eq 1 ]] && rm -f vendor/cm;
    rm -f signed-target_files.zip;
    rm -rf out/dist/*;

    # Act like nothing happens
    unset aicp execdir extraargs;
}
