#!/usr/bin/env bash
# Copyright (C) 2017-2018 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# Import common bash completion
source ${HOME}/scripts/env_common.comp

# Use Central Indonesia Time
export TZ=Asia/Makassar

# Export GOPATH early for checking
export GOPATH=${HOME}/go

# Other variables used around this script
CADDYSRC=${GOPATH}/src/github.com/mholt/caddy/caddy
CTNGCOMP=${HOME}/src/ct-ng/ct-ng.comp
TRANSFERSH=${HOME}/scripts/transfer.sh

# If 'hostname' returns botstack, set up caddy & http-server aliases
if [[ `hostname` -eq botstack ]]; then
    alias caddy="caddy -quic -quiet &"
    alias http-server="http-server -a 0.0.0.0 -p 9001 >> /dev/null &"
fi

# If GOPATH doesn't exist, unset it
[[ ! -d ${GOPATH} ]] && unset GOPATH

# Export local binary paths
export PATH=${HOME}/.local/bin:${PATH}
[[ -d ${CADDYSRC} ]] && export PATH=${CADDYSRC}:${PATH}

# crosstool-ng
[[ -f ${CTNGCOMP} ]] && source ${CTNGCOMP}

# transfer.sh
[[ -f ${TRANSFERSH} ]] && source ${TRANSFERSH}

# All those temporary variables end here
unset CADDYSRC CTNGCOMP TRANSFERSH

# Sign ROM zips before release
function rom_sign () {
    # Must be run at root of ROM source
    [[ ! -d $(pwd)/build/tools ]] && \
        echo "${BLD}rom_sign:${RST} This function must be run at root of ROM source!" && \
        return 1

    # Make sure only one target files package exists prior to running the function
    [[ $(ls $(pwd)/out/dist | grep target_files | wc -l) -ne 1 ]] && \
        echo "${BLD}rom_sign:${RST} Less or more than one target files package detected!" && \
        return 1

    # Must have signing keys in .android-certs at root of home folder before proceeding
    for SIGNKEYS in {media,platform,releasekey,shared}.{pk8,x509.pem}; do
        [[ ! -f ${HOME}/.android-certs/${SIGNKEYS} ]] && \
            echo "${BLD}rom_sign:${RST} Missing one or more signing keys in ${HOME}/.android-certs folder!" && \
            break && \
            return 1
    done

    # Sign target files package
    ./build/tools/releasetools/sign_target_files_apks \
        -o -d ${HOME}/.android-certs \
        out/dist/*-target_files-*.zip \
        signed-target_files.zip \
        || return 1

    # Convert signed target files package to signed OTA package
    ./build/tools/releasetools/ota_from_target_files \
        --block --backup=true \
        -k ${HOME}/.android-certs/releasekey \
        signed-target_files.zip \
        signed-ota_update.zip \
        || return 1

    # Cleanup
    rm -f signed-target_files.zip
    rm -rf out/dist/*
}

# Last, but my most convenient part
export PS1="\[\e[1;32m\]\u@\h\[\e[1;37m\] \W\[\e[1;33m\]\`parse_git_branch\`\[\e[1;32m\] \$\[\e[0m\] "
