#!/usr/bin/env bash
#
# A script to automatically update and apply patches for crosstool-ng.
#
# Copyright (C) 2018 Albert I (krasCGQ)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

## Only modify SRCDIR and CTDIR accordingly
function variables_list () {
    ORIDIR=`pwd`;
    SRCDIR="${HOME}/tc/git";
    CTDIR="${HOME}/src/ct-ng/packages";
}

## List of projects
# In order:
# 1) Location of git-cloned source
# 2) Branch that we need to grab upstream changes from
# 3) Location of package patches folder within ct-ng source
function projects_list () {
    ## GNU GCC
    GCCDIR="${SRCDIR}/gcc";
    GCCBRANCH="gcc-7-branch";
    GCCPATCH="${CTDIR}/gcc/7.3.0";

    ## GNU Binutils
    BINDIR="${SRCDIR}/binutils";
    BINBRANCH="binutils-2_30-branch";
    BINPATCH="${CTDIR}/binutils/2.30";
}

## Usage: update_projects "<src-dir>" "<src-branch>" "<patch-dir>"
function update_projects {
    ## Enter source directory
    cd "${1}";

    ## Fetch updates from upstream
    git fetch origin "${2}" --depth=1 2> /dev/null;

    ## Hard reset current tree to latest source
    git reset --hard "origin/${2}" > /dev/null;

    ## Clean it up; we can make mess with it at some point
    git clean -dfx > /dev/null;

    ## Apply crosstool-ng patches
    # You can edit 'grep -v' command to exclude already-applied patches
    for PATCH in $(find "${3}" | grep .patch | sort -n);
    do
        # Output patch name
        # echo -e "${PATCH}";

        # Apply every patches with merge strategy
        patch --merge -N -s -p1 -i "${PATCH}";
    done;

    ## Remove .orig files
    rm -rf $(find -name *.orig);

    ## Go back to the original dir where this script is run
    cd ${ORIDIR};
}

variables_list && projects_list || exit 1;
update_projects "${GCCDIR}" "${GCCBRANCH}" "${GCCPATCH}" || exit 1;
update_projects "${BINDIR}" "${BINBRANCH}" "${BINPATCH}" || exit 1;
echo -e "Projects updated successfully." && exit 0;
