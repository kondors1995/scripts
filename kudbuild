#!/usr/bin/env bash
#
# Copyright (C) 2018 Albert I (krasCGQ)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# TODO: Proper build script, this is made solely for mido kernel build for now

# Text styles
BLD=$(tput bold)
RST=$(tput sgr0)

# Run this inside kernel source
if [[ ! -f Makefile ]] || [[ ! -d kernel ]]; then
    echo " ${BLD}! Please run this script inside kernel source folder.${RST}"
    exit 1
fi

# Begin script
echo " - Setting up environment variables..."
sleep 1

# Unset CROSS_COMPILE and CCOMPILE if they're set
[[ ! -z ${CROSS_COMPILE} ]] && unset CROSS_COMPILE
[[ ! -z ${CCOMPILE} ]] && unset CCOMPILE

# Use ccache when available
[[ $(which ccache > /dev/null 2>&1; echo $?) -eq 0 ]] && CCOMPILE+="ccache "

# Whenever you're high enough to run this script
if [[ $(which aarch64-linux-gnu-gcc > /dev/null 2>&1; echo $?) -eq 0 ]]; then
    CCOMPILE+=aarch64-linux-gnu-
else
    echo " ${BLD}! aarch64-linux-gnu-gcc doesn't exist.${RST}"
    exit 1
fi

## Always ARM64
ARCH=arm64
## Out directory
OUT=../build/mido
## Always use all threads
THREADS=$(nproc --all)
## Kernel defconfig
#CONFIG="mido_defconfig"
## User supplied kernel compile flags
KCF="-Wno-attribute-alias -Wno-format-overflow -Wno-packed-not-aligned -Wno-restrict -Wno-sizeof-pointer-memaccess -Wno-stringop-overflow -Wno-stringop-truncation"
KAF=""
KCPPF=""
## AnyKernel2
AK2=../../../AnyKernel2

echo " - Cleaning build directory..."
sleep 1

# TODO: Completely clean build?
make ARCH=${ARCH} O=${OUT} clean > /dev/null
[[ $? != 0 ]] && \
    echo " ${BLD}! Problem occured when cleaning build directory.${RST}" && \
    exit 1

# Let's build!
echo " - Building kernel image..."
make ARCH=${ARCH} O=${OUT} CROSS_COMPILE="${CCOMPILE}" KCFLAGS="${KCF}" \
     KAFLAGS="${KAF}" KCPPFLAGS="${KCPPF}" Image.gz -j${THREADS} > /dev/null
[[ $? != 0 ]] && \
    echo " ${BLD}! Problem occured when building kernel image.${RST}" && \
    exit 1

echo " - Building dtbs..."
make ARCH=${ARCH} O=${OUT} CROSS_COMPILE="${CCOMPILE}" dtbs -j${THREADS} > /dev/null
[[ $? != 0 ]] && \
    echo " ${BLD}! Problem occured when building dtbs.${RST}" && \
    exit 1

echo " - Cleaning up AnyKernel2 folder..."
rm -rf ${AK2}/{kernel,treble-*}/*
[[ $? != 0 ]] && \
    echo " ${BLD}! Problem occured when cleaning AnyKernel2 folder.${RST}" && \
    exit 1

echo " - Copying kernel image and dtbs to AnyKernel2 folder..."
cp -rf ${OUT}/arch/arm64/boot/Image.gz ${AK2}/kernel/
cp -rf ${OUT}/arch/arm64/boot/dts/qcom/msm8953-qrd-sku3-mido.dtb ${AK2}/treble-supported/
cp -rf ${OUT}/arch/arm64/boot/dts/qcom/msm8953-qrd-sku3-mido-nt.dtb ${AK2}/treble-unsupported/
[[ $? != 0 ]] && \
    echo " ${BLD}! Problem occured when copying files.${RST}" && \
    exit 1

echo " - You're done, smart boy!"

# TODO: Pack the kernel? How?
